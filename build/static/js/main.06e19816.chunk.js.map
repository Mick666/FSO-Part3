{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","content","onClick","baseUrl","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","useEffect","noteService","initialNotes","notesToShow","filter","map","i","key","find","n","changedNote","updatedNotes","catch","error","alert","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","addedNote","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"6LAceA,EAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACf,qBAAuB,iBAE3B,OACE,4BACGH,EAAKI,QACN,4BAAQC,QAASJ,GAAmBC,K,gBCRpCI,EAAU,sDAuBD,EArBA,WACX,IAAMC,EAAUC,IAAMC,IAAIH,GACpBI,EAAc,CAClBC,GAAI,IACJP,QAAS,mCACTQ,KAAM,2BACNT,WAAW,GAEb,OAAOI,EAAQM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,OAa1C,EAVA,SAAAO,GAEb,OADgBT,IAAMU,KAAKZ,EAASW,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACJ,EAAIM,GAElB,OADgBT,IAAMW,IAAN,UAAab,EAAb,YAAwBK,GAAMM,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SC4D5BK,EA7EH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,KAKhBC,qBAAU,WACRC,IAEGhB,MAAK,SAAAiB,GACJP,EAASO,QAEZ,IAEH,IAoCMC,EAAcL,EAChBJ,EACAA,EAAMU,QAAO,SAAAhC,GAAI,OAAIA,EAAKG,aAE9B,OACE,6BACE,qCACA,6BACE,4BAAQE,QAAS,kBAAMsB,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BACGK,EAAYE,KAAI,SAACjC,EAAMkC,GAAP,OACf,kBAAC,EAAD,CAAMC,IAAKD,EAAGlC,KAAMA,EAAMC,iBAAkB,kBAlDzB,SAAAU,GACzB,IAAMX,EAAOsB,EAAMc,MAAK,SAAAC,GAAC,OAAIA,EAAE1B,KAAOA,KAChC2B,EAAW,2BAAQtC,GAAR,IAAcG,WAAYH,EAAKG,YAEhD0B,EACQlB,EAAI2B,GACXzB,MAAK,SAAA0B,GACJhB,EAASD,EAAMW,KAAI,SAAAjC,GAAI,OAAIA,EAAKW,KAAOA,EAAKX,EAAOuC,SAClDC,OAAM,SAAAC,GACPC,MAAM,YAAD,OACS1C,EAAKI,QADd,yCAGLmB,EAASD,EAAMU,QAAO,SAAAK,GAAC,OAAIA,EAAE1B,KAAOA,SAsCkBgC,CAAmB3C,EAAKW,WAG9E,0BAAMiC,SArCM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjB3C,QAASoB,EACTZ,MAAM,IAAIoC,MAAOC,cACjB9C,UAAW+C,KAAKC,SAAW,IAG7BtB,EACQkB,GACPlC,MAAK,SAAAuC,GACJ7B,EAASD,EAAMN,OAAOoC,IACtB3B,EAAW,SA0BT,2BACE4B,MAAO7B,EACP8B,SAxBiB,SAACT,GACxBpB,EAAWoB,EAAMU,OAAOF,UAyBpB,4BAAQG,KAAK,UAAb,WCvERC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.06e19816.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n\n  return (\n    <li>\n      {note.content} \n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note","import axios from 'axios'\nconst baseUrl = 'https://thawing-shelf-49632.herokuapp.com/api/notes'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    const nonExisting = {\n      id: 10000,\n      content: 'This note is not saved to server',\n      date: '2019-05-30T17:30:31.098Z',\n      important: true,\n    }\n    return request.then(response => response.data.concat(nonExisting))\n  }\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update }","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\n\nconst App = () => {\n  const [notes, setNotes] = useState([]) \n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService      \n    .update(id, changedNote)      \n    .then(updatedNotes => {        \n      setNotes(notes.map(note => note.id !== id ? note : updatedNotes))      \n    }).catch(error => {\n      alert(\n        `the note ${note.content} was already deleted from the server`\n      )\n      setNotes(notes.filter(n => n.id !== id))\n    })\n  }\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5\n    }\n\n    noteService      \n    .create(noteObject)      \n    .then(addedNote => {        \n      setNotes(notes.concat(addedNote))        \n      setNewNote('')      \n    })  \n  }\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important)\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>      \n      <ul>\n        {notesToShow.map((note, i) => \n          <Note key={i} note={note} toggleImportance={() => toggleImportanceOf(note.id)}/>\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>   \n    </div>\n  )\n}\n\nexport default App ","import ReactDOM from 'react-dom'\nimport React from 'react'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}